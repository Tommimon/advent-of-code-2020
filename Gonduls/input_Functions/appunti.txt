per eseguire file input.asm java -jar /mnt/d/Pierluigi/scuola/20-21/ACSO/modulo1/Mars4_5.jar input.asm

valori ascii mips: 
    "\n"=10
    "0"=48
    "a"=97
    " "=32
    ":"=58
    "+"=43
F 070
B 066
R 082
L 075

syscall:
    v0 = 11: stampa byte -> a0 = byte
    v0 = 1 stampa int
	li $v0, 1			# 1 --> print_int, 11 stampa byte, 4 stampa stringa se terminata da \0
	move $a0, $s2
	syscall

#open_file
	li $v0, 13			# 13 --> open_file
	la $a0, FILE_NAME		# $a0 = address of null-terminated string containing filename
	li $a1, 0 			# $a1 = flags, 0 for read-only
	li $a2, 0		        # $a2 = mode, mode is ignored
	syscall				# file descriptor returned in $v0

# print whats in the file
	li $v0, 4		# read_string syscall code = 4
	la $a0,fileWords
	syscall

READ_FILE:
	li $v0, 14			# 14 --> read_file
	move $a0, $s7			# $a0 = file descriptor
	la $a1, BUFFER 			# $a1 = address of input buffer
	li $a2, FILE_MAX_SIZE		# $a2 = maximum number of characters to read
	syscall				# $v0 contains number of characters read (0 if end-of-file, negative if error).

#Close the file
    	li $v0, 16         		# close_file syscall code
    	move $a0,$s0      		# file descriptor to close
    	syscall
		

import string
for letter in string.ascii_lowercase:
    result += all(letter in el for el in element) checks how many letters are in every element of a list
###########################################
5956 byte


#include <stdio.h>
#include <string.h>

#define INPUT "input2.txt"
#define MAX 9//654

typedef struct{
    char op[4];
    int value;
    int seen;
}operation;

void input(operation* array);
int result(operation array[], int *accumulator, int index);
int try(operation array[], int limit);
void stampa (operation array[], int limit);

int main (){
    operation array[MAX];
    input(array);
    //stampa(array, MAX);
    //printf("line\n");
    //printf ("%d\n", try(array, MAX));
    //stampa(array, MAX);
    return 0;
}

void input(operation* array){
    int i, error = 0;
    FILE * input;
    input = fopen(INPUT, "r");
    while (i<MAX && error != EOF){
        fscanf(input, "%s %d", array[i].op, &array[i].value);
        array[i].seen=0;
        error = fgetc(input);
        i++;
    }
    fclose(input);
    if (i != MAX /*&& error != EOF*/)
        printf("an error may have occured\n");
    //stampa(array, MAX);
}

int result(operation array[], int *accumulator, int index){
    if (index==MAX)
        return index;
    if(array->seen)
        return(index);
    array->seen = 1;
    if(strcmp((array + index)->op, "nop") == 0)
        return(result(array, accumulator, index+1));
    if(strcmp((array + index)->op, "acc") == 0){
        *accumulator=*accumulator + (array + index)->value;
        return(result(array, accumulator, index +1));
    }
    if(strcmp((array + index)->op, "jmp") == 0)
        return(result(array, accumulator, index + (array+index)->value));
    printf("error, program closing\n");
    return 0;
}

int try(operation array[], int limit){
    int i, j;
    int accumulator;
    for (i=0; i<limit; i++){
        accumulator=0;
        for (j=0; j<limit; j++)
            (array+j)->seen=0;
        stampa(array, MAX);
        printf("line\n");
        if(strcmp((array + i)->op, "nop") == 0){
            strcpy((array + i)->op, "jmp");
            if(result(array, &accumulator, 0) == MAX)
                return accumulator;
            strcpy((array + i)->op, "nop");
        }
        if(strcmp((array + i)->op, "jmp") == 0){
            strcpy((array + i)->op, "nop");
            if(result(array, &accumulator, 0) == MAX)
                return accumulator;
            strcpy((array + i)->op, "jmp");
        }
    }
    printf("Error occured, no nop or jmp eligeble\n");
    return 0;
}

void stampa (operation array[], int limit){
    int i;
    for (i=0; i<limit; i++){
        printf("%s %d %d\n", array[i].op, array[i].value, array[i].seen);
    }
}